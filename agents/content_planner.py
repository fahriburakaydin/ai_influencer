# agents/content_planner.py
from typing import Dict
from config import Config
from exceptions import ValidationError
from logger import logger
from pydantic import ValidationError

def content_planner(research_data: Dict, store_details: Dict = None) -> Dict:
    """
    Generates a personalized content plan based on research data and store-specific details.

    :param research_data: Trends and strategies generated by the research agent.
    :param store_details: Optional store-specific information such as name, brand voice, and unique elements.
    :return: A structured content plan incorporating niche trends and store branding.
    """
    logger.info("Starting content planning")

    try:
        if not research_data:
            raise ValidationError("Empty research data")
        
        if not isinstance(research_data, dict):
            raise ValidationError("Research data must be a dictionary")      

        # Ensure research data contains expected keys
        required_keys = {"niche_trends", "content_strategies"}
        if not required_keys.issubset(research_data.keys()):
            missing = required_keys - research_data.keys()
            raise ValidationError(f"Missing research keys: {missing}")

        # Extract store-specific details (fallback to defaults if missing)
        store_name = store_details.get("store_name", "a business") if store_details else "a business"
        brand_voice = store_details.get("brand_voice", "neutral") if store_details else "neutral"
        fun_facts = store_details.get("fun_facts", "None provided") if store_details else "None provided"
        signature_products = store_details.get("signature_products", "None specified") if store_details else "None specified"

        #  Combine trends and strategies with store branding
        combined_ideas = []
        for niche_trend, content_strategy in zip(research_data["niche_trends"], research_data["content_strategies"]):
            formatted_idea = (
                f" {niche_trend} â€“ ({store_name})\n"
                f" Strategy: {content_strategy}\n"
                f" Brand Voice: {brand_voice}\n"
                f" Fun Fact: {fun_facts}\n"
                f" Signature Products: {signature_products}"
            )
            combined_ideas.append(formatted_idea)
        
        return {
            "content_plan": combined_ideas[:Config.NUM_ALTERNATIVES]  # Return top N combination
        }
        
    except Exception as e:
        logger.error(f"Content planning failed: {str(e)}")
        raise ValidationError("Failed to create content plan") from e